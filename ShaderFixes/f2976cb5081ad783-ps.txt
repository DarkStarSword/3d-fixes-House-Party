// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f2976cb5081ad783-ps.txt
// 3DMigoto: f2976cb5081ad783 |    Unity headers extracted from Alloy_Human_Hair_HighQuality TwoSided
//    Shader "Alloy/Human/Hair/HighQuality TwoSided" {
//      CustomEditor "AlloyFieldBasedEditor"
//      Fallback "VertexLit"
//      SubShader 1/1 {
//        LOD 400
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="AlphaTest+1" "RenderType"="TransparentCutout" }
// 1:     Pass 4/8 {
// 2:     Pass 6/8 {
// 1:       Name "TRANSLUCENT_BACK_FORWARD_DELTA"
// 2:       Name "TRANSLUCENT_FRONT_FORWARD_DELTA"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="AlphaTest+1" "RenderType"="TransparentCutout" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Alloy_Human_Hair_HighQuality TwoSided:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201708220 241 6 9
//   undeciphered1a: 14
//   Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
//   undeciphered2: 1 7 7 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 1424
//   Vector 0 [_LightColor0]
//   Float 112 [_HairDiffuseWrapAmount]
//   Float 116 [_HairSpecularity]
//   Float 120 [_AnisoAngle]
//   Vector 128 [_HighlightTint0] 3
//   Float 140 [_HighlightShift0]
//   Float 144 [_HighlightWidth0]
//   Vector 148 [_HighlightTint1] 3
//   Float 160 [_HighlightShift1]
//   Float 164 [_HighlightWidth1]
//   Vector 224 [_Color]
//   Vector 240 [_MainTex_ST]
//   Vector 256 [_MainTexVelocity] 2
//   Float 268 [_MainTexUV]
//   Float 304 [_BaseColorVertexTint]
//   Float 324 [_Occlusion]
//   Float 328 [_BumpScale]
//   Matrix 1360 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 16 [_LightPositionRange]
//   Vector 32 [_LightProjectionParams]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   Matrix 272 [unity_MatrixVP]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_MainTex] 2D 10
//   SetTexture 1 [_SpecTex] 2D 20
//   SetTexture 2 [_BumpMap] 2D 30
//   SetTexture 3 [unity_RandomRotation16] 2D 40
//   SetTexture 4 [_LightTexture0] CUBE 70
//   SetTexture 5 [unity_ProbeVolumeSH] 3D 00
//   SetTexture 6 [_ShadowMapTexture] CUBE 60
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityFog" 5
//   BindCB "UnityProbeVolume" 6
//   SetSampler 5 84
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.71 on Fri Feb 23 15:59:17 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float       
// TEXCOORD                 1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
// TEXCOORD                 3   xyzw        4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   x   
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
// TEXCOORD                 8   xyz         9     NONE   float   xyz 
// TEXCOORD                 9   xyz        10     NONE   float   xyz 
// SV_IsFrontFace           0   x          11    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 0.123298101, -0.0392337516, 0.118705302, 0.795156479},
                              { -0.562537730, -0.360242814, 0.117367499, 0.608787775},
                              { 0.640371919, 0.0682112277, -0.0995851830, 0.724884212},
                              { 0.281338692, -0.588158786, 0.425981194, 0.615271807},
                              { -0.573121786, 0.270057201, 0.372357398, 0.889278710},
                              { 0.203316599, 0.419773906, -0.0228967592, 0.997290790},
                              { 0.846795797, -0.354558408, -0.0823479071, 0.504838586},
                              { -0.423045099, -0.797441, 0.182123497, 0.967378676},
                              { 0.719025314, 0.569357514, -0.213726401, 0.901174605},
                              { 0.0381546803, -0.991417110, 0.311506599, 0.420541495},
                              { -0.223626494, 0.502861381, 0.121632896, 0.383266},
                              { 0.172225401, 0.983663, 0.594893873, 0.759436071},
                              { -0.291246414, 0.898051202, 0.757646501, 0.533641696},
                              { -0.898414791, -0.0876278579, -0.521125, 0.759980321},
                              { -0.699508488, 0.673418522, -0.292312711, 0.654569924},
                              { -0.293196, -0.0628911927, 0.678247273, 0.223850},
                              { 0, 0, -0.307715207, 0.469762713},
                              { 0, 0, 0.448491305, 0.261945486},
                              { 0, 0, -0.530879915, 0.499821514},
                              { 0, 0, -0.737963378, 0.530493617},
                              { 0, 0, 0.0261313301, 0.176430196},
                              { 0, 0, -0.146107301, 0.304738402},
                              { 0, 0, -0.845102727, 0.324907303},
                              { 0, 0, -0.450770706, 0.210199699},
                              { 0, 0, -0.613728225, 0.328367412},
                              { 0, 0, -0.238586798, 0.0871624425},
                              { 0, 0, 0.338654786, 0.0152841099},
                              { 0, 0, -0.0423083305, -0.149465203},
                              { 0, 0, 0.167115, -0.109864801},
                              { 0, 0, -0.525606, 0.0157201905},
                              { 0, 0, -0.796685517, 0.131872699},
                              { 0, 0, 0.570428729, 0.477827311},
                              { 0, 0, -0.951663673, 0.00272503193},
                              { 0, 0, -0.706822276, -0.157232106},
                              { 0, 0, 0.217330605, -0.349408299},
                              { 0, 0, 0.0610042587, -0.449281603},
                              { 0, 0, 0.233398199, 0.224718899},
                              { 0, 0, 0.0727098733, -0.639673412},
                              { 0, 0, 0.467080802, -0.232466906},
                              { 0, 0, 0.372952789, -0.512625},
                              { 0, 0, 0.567507684, -0.405454397},
                              { 0, 0, -0.369198412, -0.128435},
                              { 0, 0, 0.875247300, 0.225698799},
                              { 0, 0, -0.268012702, -0.468439311},
                              { 0, 0, -0.117755100, -0.720575094},
                              { 0, 0, -0.127012104, -0.310542405},
                              { 0, 0, 0.559539378, -0.0630923733},
                              { 0, 0, -0.929913580, -0.187000796},
                              { 0, 0, 0.974674, 0.0367734805},
                              { 0, 0, 0.772673488, -0.0694472417},
                              { 0, 0, -0.499536097, -0.366374910},
                              { 0, 0, 0.647416770, -0.231578693},
                              { 0, 0, 0.191144899, -0.885892093},
                              { 0, 0, 0.367100090, -0.797053516},
                              { 0, 0, -0.697035313, -0.444943190},
                              { 0, 0, -0.417599, -0.718932629},
                              { 0, 0, -0.558474779, -0.602650404},
                              { 0, 0, -0.0262444802, -0.914142311},
                              { 0, 0, 0.565636, -0.658514917},
                              { 0, 0, -0.874976, -0.399787903},
                              { 0, 0, 0.917784274, -0.211052403},
                              { 0, 0, 0.815692723, -0.396955699},
                              { 0, 0, -0.283305407, -0.839544415},
                              { 0, 0, 0.799141, -0.588637173} }
dcl_constantbuffer cb0[88], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[23], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_comparison
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.x
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyz
dcl_input_ps linear v9.xyz
dcl_input_ps linear v10.xyz
dcl_input_ps_sgv v11.x, is_front_face
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f2976cb5081ad783-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

movc r0.x, v11.x, l(1.000000), l(-1.000000)
mul r0.xyz, r0.xxxx, v10.xyzx
add r1.xyz, -v5.xyzx, r15.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
lt r1.w, cb0[16].w, l(0.500000)
movc r3.xy, r1.wwww, v7.xyxx, v7.zwzz
mad r3.zw, cb0[16].xxxy, cb1[0].yyyy, cb0[15].zzzw
div r3.zw, r3.zzzw, cb0[15].xxxy
add r3.xy, r3.zwzz, r3.xyxx
mul r3.xy, r3.xyxx, cb0[15].xyxx
add r4.xyz, v4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r4.xyz, cb0[19].xxxx, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, cb0[14].xyzx
sample r5.xyzw, r3.xyxx, t0.xyzw, s1
mul_sat r4.xyz, r4.xyzx, r5.xyzx
mul r5.w, r5.w, cb0[14].w
sample r6.xyzw, r3.xyxx, t1.xyzw, s2
mad r1.w, r6.y, l(0.305306017), l(0.682171106)
mad r1.w, r6.y, r1.w, l(0.0125228781)
add r2.w, r6.x, l(-0.500000)
mul r7.xyz, r6.zzzz, cb0[8].xyzx
add r3.z, r2.w, cb0[8].w
add r2.w, r2.w, cb0[10].x
mad r1.w, r6.y, r1.w, l(-1.000000)
mad r1.w, cb0[20].y, r1.w, l(1.000000)
mul r6.xy, cb0[7].zyzz, l(0.0174532924, 0.080000, 0.000000, 0.000000)
sincos r6.x, r8.x, r6.x
sample r9.xyzw, r3.xyxx, t2.xyzw, s3
mul r9.x, r9.w, r9.x
mad r3.xy, r9.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r3.xy, r3.xyxx, cb0[20].zzzz
dp2 r3.w, r3.xyxx, r3.xyxx
min r3.w, r3.w, l(1.000000)
add r3.w, -r3.w, l(1.000000)
sqrt r3.w, r3.w
mul r8.yzw, r3.yyyy, v9.xxyz
mad r8.yzw, r3.xxxx, v8.xxyz, r8.yyzw
mad r0.xyz, r3.wwww, r0.xyzx, r8.yzwy
dp3 r3.x, r0.xyzx, r0.xyzx
rsq r3.x, r3.x
mul r0.xyz, r0.xyzx, r3.xxxx
dp3_sat r2.x, r0.xyzx, r2.xyzx
add r2.x, r1.w, r2.x
mad r1.w, r2.x, r2.x, r1.w
add_sat r1.w, r1.w, l(-1.000000)
mul r2.xyz, r6.xxxx, v9.xyzx
mad r2.xyz, r8.xxxx, v8.xyzx, r2.xyzx
dp3 r3.x, r2.xyzx, r2.xyzx
rsq r3.x, r3.x
mul r2.xyz, r2.xyzx, r3.xxxx
mul r3.xyw, r7.xyxz, r6.yyyy
add r4.w, -r6.w, l(1.000000)
mad r6.x, cb0[9].x, r4.w, r6.w
mul r7.xyz, r6.yyyy, cb0[9].yzwy
mad r4.w, cb0[10].y, r4.w, r6.w
mov r8.x, cb4[9].z
mov r8.y, cb4[10].z
mov r8.z, cb4[11].z
dp3 r6.y, r1.xyzx, r8.xyzx
add r8.xyz, v5.xyzx, -cb3[25].xyzx
dp3 r6.z, r8.xyzx, r8.xyzx
sqrt r6.z, r6.z
add r6.z, -r6.y, r6.z
mad r6.y, cb3[25].w, r6.z, r6.y
mad_sat r6.y, r6.y, cb3[24].z, cb3[24].w
eq r6.z, cb6[0].x, l(1.000000)
if_nz r6.z
  eq r6.w, cb6[0].y, l(1.000000)
  mul r8.xyz, v5.yyyy, cb6[2].xyzx
  mad r8.xyz, cb6[1].xyzx, v5.xxxx, r8.xyzx
  mad r8.xyz, cb6[3].xyzx, v5.zzzz, r8.xyzx
  add r8.xyz, r8.xyzx, cb6[4].xyzx
  movc r8.xyz, r6.wwww, r8.xyzx, v5.xyzx
  add r8.xyz, r8.xyzx, -cb6[6].xyzx
  mul r8.yzw, r8.xxyz, cb6[5].xxyz
  mad r6.w, r8.y, l(0.250000), l(0.750000)
  mad r7.w, cb6[0].z, l(0.500000), l(0.750000)
  max r8.x, r6.w, r7.w
  sample r8.xyzw, r8.xzwx, t5.xyzw, s0
else 
  mov r8.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
dp4_sat r6.w, r8.xyzw, cb2[46].xyzw
lt r7.w, r6.y, l(0.990000)
if_nz r7.w
  add r8.xyz, v5.xyzx, -cb2[1].xyzx
  max r7.w, |r8.y|, |r8.x|
  max r7.w, |r8.z|, r7.w
  max r8.w, cb2[2].z, l(0.100000)
  min r8.w, r8.w, l(2.000000)
  add r7.w, r7.w, -r8.w
  max r7.w, r7.w, l(0.000000)
  mul r7.w, r7.w, cb2[2].w
  div r7.w, cb2[2].y, r7.w
  add r7.w, r7.w, -cb2[2].x
  add r7.w, -r7.w, l(1.000000)
  mul r9.xyz, v5.yyyy, cb4[18].xywx
  mad r9.xyz, cb4[17].xywx, v5.xxxx, r9.xyzx
  mad r9.xyz, cb4[19].xywx, v5.zzzz, r9.xyzx
  add r9.xyz, r9.xyzx, cb4[20].xywx
  mul r10.xz, r9.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
  mul r8.w, r9.y, cb1[5].x
  mul r10.w, r8.w, l(0.500000)
  add r9.xy, r10.zzzz, r10.xwxx
  div r9.xy, r9.xyxx, r9.zzzz
  sample r9.xyzw, r9.xyxx, t3.xyzw, s4
  mul r10.xyz, r9.xyzx, l(45.543201, 12.989800, 78.233002, 0.000000)
  mad r9.xyz, r9.zxyz, l(12.989800, 78.233002, 45.543201, 0.000000), -r10.xyzx
  sincos r9.xyz, null, r9.xyzx
  mul r9.xyz, r9.xyzx, l(43758.546875, 43758.546875, 43758.546875, 0.000000)
  frc r9.xyz, r9.xyzx
  mad r9.xyz, r9.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000), l(0.000100, 0.000100, 0.000100, 0.000000)
  mul r10.xyz, r8.zxyz, r9.xyzx
  mad r9.xyz, r8.yzxy, r9.yzxy, -r10.xyzx
  dp3 r8.w, r9.xyzx, r9.xyzx
  rsq r8.w, r8.w
  mul r9.xyz, r8.wwww, r9.xyzx
  mul r10.xyz, r8.zxyz, r9.yzxy
  mad r10.xyz, r8.yzxy, r9.zxyz, -r10.xyzx
  dp3 r8.w, r10.xyzx, r10.xyzx
  rsq r8.w, r8.w
  mul r10.xyz, r8.wwww, r10.xyzx
  add r8.w, -cb3[24].x, l(1.000000)
  mul r8.w, r8.w, l(0.250000)
  mul r9.xyz, r8.wwww, r9.xyzx
  mul r10.xyz, r8.wwww, r10.xyzx
  mov r11.xy, l(0,0,0,0)
  mov r8.w, l(0)
  loop 
    ige r9.w, r8.w, l(16)
    breakc_nz r9.w
    mul r12.xyz, r10.xyzx, icb[r8.w + 0].yyyy
    mad r12.xyz, r9.xyzx, icb[r8.w + 0].xxxx, r12.xyzx
    add r12.xyz, r8.xyzx, r12.xyzx
    sample_l r12.xyzw, r12.xyzx, t6.xyzw, s5, l(0.000000)
    ge r9.w, r12.x, r7.w
    add r13.x, r11.x, l(1.000000)
    add r13.y, r11.y, r12.x
    movc r11.xy, r9.wwww, r13.xyxx, r11.xyxx
    iadd r8.w, r8.w, l(1)
  endloop 
  eq r11.zw, r11.xxxx, l(0.000000, 0.000000, 0.000000, 16.000000)
  and r8.w, r11.z, l(0x3f800000)
  or r9.w, r11.w, r11.z
  if_z r9.w
    div r9.w, r11.y, r11.x
    add r10.w, r7.w, -r9.w
    div r9.w, r10.w, r9.w
    mul r10.w, cb2[1].w, l(0.015000)
    mov r11.xy, l(0,0,0,0)
    loop 
      itof r11.z, r11.y
      ge r11.z, r11.z, l(64.000000)
      breakc_nz r11.z
      mul r12.xyz, r10.xyzx, icb[r11.y + 0].wwww
      mad r12.xyz, r9.xyzx, icb[r11.y + 0].zzzz, r12.xyzx
      mad r12.xyz, r12.xyzx, r9.wwww, r8.xyzx
      sample_c_lz r11.z, r12.xyzx, t6.xxxx, s6, r7.w
      div_sat r11.z, r11.z, r10.w
      add r11.x, r11.z, r11.x
      iadd r11.y, r11.y, l(1)
    endloop 
    mul r8.w, r11.x, l(0.015625)
  endif 
else 
  mov r8.w, l(1.000000)
endif 
add r6.y, r6.y, r8.w
min r6.y, r6.y, l(1.000000)
min r6.w, r6.y, r6.w
movc r6.y, r6.z, r6.w, r6.y
sample r8.xyzw, v1.xyzx, t4.xyzw, s7
mul r8.xyz, r8.wwww, r8.xyzx
mul r8.xyz, r8.xyzx, cb0[0].xyzx
ge r6.z, cb0[0].w, l(1.000000)
if_nz r6.z
  mov r9.x, cb0[85].y
  mov r9.y, cb0[86].y
  mov r9.z, cb0[87].y
  dp3 r6.z, r9.xyzx, r9.xyzx
  rsq r6.z, r6.z
  mul r9.xyz, r6.zzzz, r9.xyzx
  frc r6.z, |cb0[0].w|
  add r6.z, -r6.z, |cb0[0].w|
  mul r6.z, r6.z, l(0.001000)
  mul r6.z, r6.z, v2.w
  dp3 r6.w, v2.xyzx, r9.xyzx
  max r6.w, -r6.z, r6.w
  min r6.w, r6.z, r6.w
  mad r9.xyz, -r6.wwww, r9.xyzx, v2.xyzx
  dp3 r6.w, v2.xyzx, v2.xyzx
  rsq r6.w, r6.w
  mul r6.z, r6.z, l(0.250000)
  mad r10.xyz, r1.xyzx, r0.wwww, r9.xyzx
  dp3 r7.w, r10.xyzx, r10.xyzx
  rsq r7.w, r7.w
  mul r10.xyz, r7.wwww, r10.xyzx
  dp3 r7.w, r9.xyzx, r9.xyzx
  rsq r8.w, r7.w
  mul r9.xyz, r8.wwww, r9.xyzx
  dp3 r9.x, r0.xyzx, r9.xyzx
  mov_sat r9.y, r9.x
  add r7.w, r7.w, l(1.000000)
  div r11.xyz, r8.xyzx, r7.wwww
  mad r6.z, r6.z, r8.w, l(1.000000)
  div r11.xyz, r11.xyzx, r6.zzzz
else 
  mad r1.xyz, r1.xyzx, r0.wwww, v2.xyzx
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r10.xyz, r0.wwww, r1.xyzx
  dp3 r0.w, v2.xyzx, v2.xyzx
  rsq r6.w, r0.w
  mul r1.xyz, r6.wwww, v2.xyzx
  dp3 r9.x, r0.xyzx, r1.xyzx
  mov_sat r9.y, r9.x
  add r0.w, r0.w, l(1.000000)
  div r11.xyz, r8.xyzx, r0.wwww
endif 
mul r0.w, r6.w, v2.w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.w, r0.w, r0.w
mad r0.w, -r0.w, r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, r0.w
mul r1.xyz, r0.wwww, r11.xyzx
lt r0.w, l(0.000000), cb0[0].w
and r0.w, r0.w, l(0x3f800000)
add r6.z, cb0[7].x, l(1.000000)
add r6.w, r9.x, cb0[7].x
mul r6.z, r6.z, r6.z
div_sat r6.z, r6.w, r6.z
mad r6.x, r6.x, l(0.950000), l(0.050000)
mul r6.x, r6.x, r6.x
mul r6.x, r6.x, r6.x
div r6.x, l(2.000000), r6.x
add r6.x, r6.x, l(-2.000000)
mad r8.xyz, r0.xyzx, r3.zzzz, r2.xyzx
dp3 r3.z, r8.xyzx, r8.xyzx
rsq r3.z, r3.z
mul r8.xyz, r3.zzzz, r8.xyzx
dp3 r3.z, r8.xyzx, r10.xyzx
mad r6.w, r6.x, l(0.125000), l(0.250000)
mad r3.z, -r3.z, r3.z, l(1.000000)
sqrt r3.z, r3.z
log r3.z, r3.z
mul r3.z, r3.z, r6.x
exp r3.z, r3.z
mul r3.z, r3.z, r6.w
mul r3.xyz, r3.zzzz, r3.xywx
mad r3.w, r4.w, l(0.950000), l(0.050000)
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r3.w
div r3.w, l(2.000000), r3.w
add r3.w, r3.w, l(-2.000000)
mad r0.xyz, r0.xyzx, r2.wwww, r2.xyzx
dp3 r2.x, r0.xyzx, r0.xyzx
rsq r2.x, r2.x
mul r0.xyz, r0.xyzx, r2.xxxx
dp3 r0.x, r0.xyzx, r10.xyzx
mad r0.y, r3.w, l(0.125000), l(0.250000)
mad r0.x, -r0.x, r0.x, l(1.000000)
sqrt r0.x, r0.x
log r0.x, r0.x
mul r0.x, r0.x, r3.w
exp r0.x, r0.x
mul r0.x, r0.x, r0.y
mul r0.xyz, r0.xxxx, r7.xyzx
mul r0.w, r0.w, r1.w
mul r0.w, r9.y, r0.w
max r0.xyz, r0.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, r0.wwww
mul r1.xyz, r6.yyyy, r1.xyzx
mad r0.xyz, r4.xyzx, r6.zzzz, r0.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx
div r0.w, v6.x, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, cb5[1].x
mul r0.w, r0.w, -r0.w
exp r0.w, r0.w
mul r5.xyz, r0.xyzx, r0.wwww
min o0.xyzw, r5.xyzw, l(100.000000, 100.000000, 100.000000, 100.000000)
ret 
// Approximately 0 instruction slots used