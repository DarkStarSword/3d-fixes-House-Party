// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 74b0c0b7b740978f-ps.txt
// 3DMigoto: 74b0c0b7b740978f |    Unity headers extracted from Alloy_Human_Hair_HighQuality TwoSided
//    Shader "Alloy/Human/Hair/HighQuality TwoSided" {
//      CustomEditor "AlloyFieldBasedEditor"
//      Fallback "VertexLit"
//      SubShader 1/1 {
//        LOD 400
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="AlphaTest+1" "RenderType"="TransparentCutout" }
//        Pass 2/8 {
//          Name "FORWARD_DELTA"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="AlphaTest+1" "RenderType"="TransparentCutout" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Alloy_Human_Hair_HighQuality TwoSided:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201708220 187 7 6
//   undeciphered1a: 11
//   Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SHADOWMASK" "FOG_EXP2" }
//   undeciphered2: 1 8 7 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 1424
//   Vector 0 [_LightColor0]
//   Float 112 [_HairDiffuseWrapAmount]
//   Float 116 [_HairSpecularity]
//   Float 120 [_AnisoAngle]
//   Vector 128 [_HighlightTint0] 3
//   Float 140 [_HighlightShift0]
//   Float 144 [_HighlightWidth0]
//   Vector 148 [_HighlightTint1] 3
//   Float 160 [_HighlightShift1]
//   Float 164 [_HighlightWidth1]
//   Float 208 [_Cutoff]
//   Vector 224 [_Color]
//   Vector 240 [_MainTex_ST]
//   Vector 256 [_MainTexVelocity] 2
//   Float 268 [_MainTexUV]
//   Float 304 [_BaseColorVertexTint]
//   Float 324 [_Occlusion]
//   Float 328 [_BumpScale]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 16 [_LightPositionRange]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_MainTex] 2D 20
//   SetTexture 1 [_SpecTex] 2D 30
//   SetTexture 2 [_BumpMap] 2D 40
//   SetTexture 3 [unity_RandomRotation16] 2D 50
//   SetTexture 4 [_LightTexture0] 2D 70
//   SetTexture 5 [unity_ShadowMask] 2D 00
//   SetTexture 6 [unity_ProbeVolumeSH] 3D 10
//   SetTexture 7 [_ShadowMapTexture] 2D 60
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityFog" 5
//   BindCB "UnityProbeVolume" 6
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.71 on Fri Feb 23 15:28:03 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
// TEXCOORD                 3   xyzw        4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   x   
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
// TEXCOORD                 8   xyz         9     NONE   float   xyz 
// TEXCOORD                 9   xyz        10     NONE   float   xyz 
// SV_IsFrontFace           0   x          11    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 0.123298101, -0.0392337516, 0.118705302, 0.795156479},
                              { -0.562537730, -0.360242814, 0.117367499, 0.608787775},
                              { 0.640371919, 0.0682112277, -0.0995851830, 0.724884212},
                              { 0.281338692, -0.588158786, 0.425981194, 0.615271807},
                              { -0.573121786, 0.270057201, 0.372357398, 0.889278710},
                              { 0.203316599, 0.419773906, -0.0228967592, 0.997290790},
                              { 0.846795797, -0.354558408, -0.0823479071, 0.504838586},
                              { -0.423045099, -0.797441, 0.182123497, 0.967378676},
                              { 0.719025314, 0.569357514, -0.213726401, 0.901174605},
                              { 0.0381546803, -0.991417110, 0.311506599, 0.420541495},
                              { -0.223626494, 0.502861381, 0.121632896, 0.383266},
                              { 0.172225401, 0.983663, 0.594893873, 0.759436071},
                              { -0.291246414, 0.898051202, 0.757646501, 0.533641696},
                              { -0.898414791, -0.0876278579, -0.521125, 0.759980321},
                              { -0.699508488, 0.673418522, -0.292312711, 0.654569924},
                              { -0.293196, -0.0628911927, 0.678247273, 0.223850},
                              { 0, 0, -0.307715207, 0.469762713},
                              { 0, 0, 0.448491305, 0.261945486},
                              { 0, 0, -0.530879915, 0.499821514},
                              { 0, 0, -0.737963378, 0.530493617},
                              { 0, 0, 0.0261313301, 0.176430196},
                              { 0, 0, -0.146107301, 0.304738402},
                              { 0, 0, -0.845102727, 0.324907303},
                              { 0, 0, -0.450770706, 0.210199699},
                              { 0, 0, -0.613728225, 0.328367412},
                              { 0, 0, -0.238586798, 0.0871624425},
                              { 0, 0, 0.338654786, 0.0152841099},
                              { 0, 0, -0.0423083305, -0.149465203},
                              { 0, 0, 0.167115, -0.109864801},
                              { 0, 0, -0.525606, 0.0157201905},
                              { 0, 0, -0.796685517, 0.131872699},
                              { 0, 0, 0.570428729, 0.477827311},
                              { 0, 0, -0.951663673, 0.00272503193},
                              { 0, 0, -0.706822276, -0.157232106},
                              { 0, 0, 0.217330605, -0.349408299},
                              { 0, 0, 0.0610042587, -0.449281603},
                              { 0, 0, 0.233398199, 0.224718899},
                              { 0, 0, 0.0727098733, -0.639673412},
                              { 0, 0, 0.467080802, -0.232466906},
                              { 0, 0, 0.372952789, -0.512625},
                              { 0, 0, 0.567507684, -0.405454397},
                              { 0, 0, -0.369198412, -0.128435},
                              { 0, 0, 0.875247300, 0.225698799},
                              { 0, 0, -0.268012702, -0.468439311},
                              { 0, 0, -0.117755100, -0.720575094},
                              { 0, 0, -0.127012104, -0.310542405},
                              { 0, 0, 0.559539378, -0.0630923733},
                              { 0, 0, -0.929913580, -0.187000796},
                              { 0, 0, 0.974674, 0.0367734805},
                              { 0, 0, 0.772673488, -0.0694472417},
                              { 0, 0, -0.499536097, -0.366374910},
                              { 0, 0, 0.647416770, -0.231578693},
                              { 0, 0, 0.191144899, -0.885892093},
                              { 0, 0, 0.367100090, -0.797053516},
                              { 0, 0, -0.697035313, -0.444943190},
                              { 0, 0, -0.417599, -0.718932629},
                              { 0, 0, -0.558474779, -0.602650404},
                              { 0, 0, -0.0262444802, -0.914142311},
                              { 0, 0, 0.565636, -0.658514917},
                              { 0, 0, -0.874976, -0.399787903},
                              { 0, 0, 0.917784274, -0.211052403},
                              { 0, 0, 0.815692723, -0.396955699},
                              { 0, 0, -0.283305407, -0.839544415},
                              { 0, 0, 0.799141, -0.588637173} }
dcl_constantbuffer cb0[21], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_comparison
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture3d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.x
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyz
dcl_input_ps linear v9.xyz
dcl_input_ps linear v10.xyz
dcl_input_ps_sgv v11.x, is_front_face
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 74b0c0b7b740978f-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

movc r0.x, v11.x, l(1.000000), l(-1.000000)
mul r0.xyz, r0.xxxx, v10.xyzx
add r1.xyz, -v5.xyzx, r12.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
lt r1.w, cb0[16].w, l(0.500000)
movc r3.xy, r1.wwww, v7.xyxx, v7.zwzz
mad r3.zw, cb0[16].xxxy, cb1[0].yyyy, cb0[15].zzzw
div r3.zw, r3.zzzw, cb0[15].xxxy
add r3.xy, r3.zwzz, r3.xyxx
mul r3.xy, r3.xyxx, cb0[15].xyxx
add r4.xyz, v4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r4.xyz, cb0[19].xxxx, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, cb0[14].xyzx
sample r5.xyzw, r3.xyxx, t0.xyzw, s2
mul_sat r4.xyz, r4.xyzx, r5.xyzx
mad r1.w, cb0[14].w, r5.w, -cb0[13].x
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
sample r5.xyzw, r3.xyxx, t1.xyzw, s3
mad r1.w, r5.y, l(0.305306017), l(0.682171106)
mad r1.w, r5.y, r1.w, l(0.0125228781)
add r2.w, r5.x, l(-0.500000)
mul r6.xyz, r5.zzzz, cb0[8].xyzx
add r3.z, r2.w, cb0[8].w
add r2.w, r2.w, cb0[10].x
mad r1.w, r5.y, r1.w, l(-1.000000)
mad r1.w, cb0[20].y, r1.w, l(1.000000)
mul r5.xy, cb0[7].zyzz, l(0.0174532924, 0.080000, 0.000000, 0.000000)
sincos r5.x, r7.x, r5.x
sample r8.xyzw, r3.xyxx, t2.xyzw, s4
mul r8.x, r8.w, r8.x
mad r3.xy, r8.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r3.xy, r3.xyxx, cb0[20].zzzz
dp2 r3.w, r3.xyxx, r3.xyxx
min r3.w, r3.w, l(1.000000)
add r3.w, -r3.w, l(1.000000)
sqrt r3.w, r3.w
mul r7.yzw, r3.yyyy, v9.xxyz
mad r7.yzw, r3.xxxx, v8.xxyz, r7.yyzw
mad r0.xyz, r3.wwww, r0.xyzx, r7.yzwy
dp3 r3.x, r0.xyzx, r0.xyzx
rsq r3.x, r3.x
mul r0.xyz, r0.xyzx, r3.xxxx
dp3_sat r2.x, r0.xyzx, r2.xyzx
add r2.x, r1.w, r2.x
mad r1.w, r2.x, r2.x, r1.w
add_sat r1.w, r1.w, l(-1.000000)
mul r2.xyz, r5.xxxx, v9.xyzx
mad r2.xyz, r7.xxxx, v8.xyzx, r2.xyzx
dp3 r3.x, r2.xyzx, r2.xyzx
rsq r3.x, r3.x
mul r2.xyz, r2.xyzx, r3.xxxx
mul r3.xyw, r6.xyxz, r5.yyyy
add r4.w, -r5.w, l(1.000000)
mad r5.x, cb0[9].x, r4.w, r5.w
mul r6.xyz, r5.yyyy, cb0[9].yzwy
mad r4.w, cb0[10].y, r4.w, r5.w
mov r7.x, cb4[9].z
mov r7.y, cb4[10].z
mov r7.z, cb4[11].z
dp3 r5.y, r1.xyzx, r7.xyzx
add r7.xyz, v5.xyzx, -cb3[25].xyzx
dp3 r5.z, r7.xyzx, r7.xyzx
sqrt r5.z, r5.z
add r5.z, -r5.y, r5.z
mad r5.y, cb3[25].w, r5.z, r5.y
mad_sat r5.y, r5.y, cb3[24].z, cb3[24].w
eq r5.z, cb6[0].x, l(1.000000)
if_nz r5.z
  eq r5.z, cb6[0].y, l(1.000000)
  mul r7.xyz, v5.yyyy, cb6[2].xyzx
  mad r7.xyz, cb6[1].xyzx, v5.xxxx, r7.xyzx
  mad r7.xyz, cb6[3].xyzx, v5.zzzz, r7.xyzx
  add r7.xyz, r7.xyzx, cb6[4].xyzx
  movc r7.xyz, r5.zzzz, r7.xyzx, v5.xyzx
  add r7.xyz, r7.xyzx, -cb6[6].xyzx
  mul r7.yzw, r7.xxyz, cb6[5].xxyz
  mad r5.z, r7.y, l(0.250000), l(0.750000)
  mad r5.w, cb6[0].z, l(0.500000), l(0.750000)
  max r7.x, r5.w, r5.z
  sample r7.xyzw, r7.xzwx, t6.xyzw, s1
else 
  sample r7.xyzw, v0.xyxx, t5.xyzw, s0
endif 
dp4_sat r5.z, r7.xyzw, cb2[46].xyzw
mul r7.xyzw, v5.yyyy, cb3[9].xyzw
mad r7.xyzw, cb3[8].xyzw, v5.xxxx, r7.xyzw
mad r7.xyzw, cb3[10].xyzw, v5.zzzz, r7.xyzw
add r7.xyzw, r7.xyzw, cb3[11].xyzw
div r7.xyz, r7.xyzx, r7.wwww
mul r8.xy, r7.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
sample r8.xyzw, r8.xyxx, t3.xyzw, s5
dp3 r5.w, r8.xyzx, l(12.989800, 78.233002, 45.543201, 0.000000)
sincos r5.w, null, r5.w
mul r5.w, r5.w, l(43758.546875)
frc r5.w, r5.w
mul r5.w, r5.w, l(10.000000)
sincos r8.x, r9.x, r5.w
add r5.w, -cb3[24].x, l(1.000000)
mul r5.w, r5.w, l(0.012500)
mov r6.w, l(0)
mov r7.w, l(0)
loop 
  ige r8.y, r7.w, l(16)
  breakc_nz r8.y
  mul r8.yz, r9.xxxx, icb[r7.w + 0].xxyx
  mad r10.x, icb[r7.w + 0].y, r8.x, r8.y
  mad r10.y, icb[r7.w + 0].x, -r8.x, r8.z
  mad r8.yz, r10.xxyx, r5.wwww, r7.xxyx
  sample_c_lz r8.y, r8.yzyy, t7.xxxx, s6, r7.z
  add r6.w, r6.w, r8.y
  iadd r7.w, r7.w, l(1)
endloop 
eq r8.yz, r6.wwww, l(0.000000, 0.000000, 16.000000, 0.000000)
or r6.w, r8.z, r8.y
if_z r6.w
  mul r6.w, cb2[1].w, l(0.015000)
  mov r7.w, l(0)
  mov r8.z, l(0)
  loop 
    itof r8.w, r8.z
    ge r8.w, r8.w, l(64.000000)
    breakc_nz r8.w
    mul r9.yz, r9.xxxx, icb[r8.z + 0].zzwz
    mad r10.x, icb[r8.z + 0].w, r8.x, r9.y
    mad r10.y, icb[r8.z + 0].z, -r8.x, r9.z
    mad r9.yz, r10.xxyx, r5.wwww, r7.xxyx
    sample_c_lz r8.w, r9.yzyy, t7.xxxx, s6, r7.z
    div_sat r8.w, r8.w, r6.w
    add r7.w, r7.w, r8.w
    iadd r8.z, r8.z, l(1)
  endloop 
  mul r5.w, r7.w, l(0.015625)
else 
  movc r5.w, r8.y, l(0), l(1.000000)
endif 
add r5.y, r5.y, r5.w
min r5.y, r5.y, l(1.000000)
min r5.y, r5.z, r5.y
div r5.zw, v1.xxxy, v1.wwww
add r5.zw, r5.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
sample r7.xyzw, r5.zwzz, t4.xyzw, s7
lt r5.z, l(0.000000), v1.z
and r5.z, r5.z, l(0x3f800000)
mul r5.z, r5.z, r7.w
mul r7.xyz, r5.zzzz, r7.xyzx
mul r7.xyz, r7.xyzx, cb0[0].xyzx
mad r1.xyz, r1.xyzx, r0.wwww, v2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r5.z, r0.w
mul r8.xyzw, r5.zzzz, v2.xyzw
dp3 r5.z, r0.xyzx, r8.xyzx
mov_sat r5.w, r5.z
add r0.w, r0.w, l(1.000000)
div r7.xyz, r7.xyzx, r0.wwww
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
mul r0.w, r0.w, r0.w
mad r0.w, -r0.w, r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
lt r0.w, l(0.000000), cb0[0].w
and r0.w, r0.w, l(0x3f800000)
add r6.w, cb0[7].x, l(1.000000)
add r5.z, r5.z, cb0[7].x
mul r6.w, r6.w, r6.w
div_sat r5.z, r5.z, r6.w
mad r5.x, r5.x, l(0.950000), l(0.050000)
mul r5.x, r5.x, r5.x
mul r5.x, r5.x, r5.x
div r5.x, l(2.000000), r5.x
add r5.x, r5.x, l(-2.000000)
mad r8.xyz, r0.xyzx, r3.zzzz, r2.xyzx
dp3 r3.z, r8.xyzx, r8.xyzx
rsq r3.z, r3.z
mul r8.xyz, r3.zzzz, r8.xyzx
dp3 r3.z, r8.xyzx, r1.xyzx
mad r6.w, r5.x, l(0.125000), l(0.250000)
mad r3.z, -r3.z, r3.z, l(1.000000)
sqrt r3.z, r3.z
log r3.z, r3.z
mul r3.z, r3.z, r5.x
exp r3.z, r3.z
mul r3.z, r3.z, r6.w
mul r3.xyz, r3.zzzz, r3.xywx
mad r3.w, r4.w, l(0.950000), l(0.050000)
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r3.w
div r3.w, l(2.000000), r3.w
add r3.w, r3.w, l(-2.000000)
mad r0.xyz, r0.xyzx, r2.wwww, r2.xyzx
dp3 r2.x, r0.xyzx, r0.xyzx
rsq r2.x, r2.x
mul r0.xyz, r0.xyzx, r2.xxxx
dp3 r0.x, r0.xyzx, r1.xyzx
mad r0.y, r3.w, l(0.125000), l(0.250000)
mad r0.x, -r0.x, r0.x, l(1.000000)
sqrt r0.x, r0.x
log r0.x, r0.x
mul r0.x, r0.x, r3.w
exp r0.x, r0.x
mul r0.x, r0.x, r0.y
mul r0.xyz, r0.xxxx, r6.xyzx
mul r0.w, r0.w, r1.w
mul r0.w, r5.w, r0.w
max r0.xyz, r0.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, r0.wwww
mul r1.xyz, r5.yyyy, r7.xyzx
mad r0.xyz, r4.xyzx, r5.zzzz, r0.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx
div r0.w, v6.x, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, cb5[1].x
mul r0.w, r0.w, -r0.w
exp r0.w, r0.w
mul r0.xyz, r0.xyzx, r0.wwww
min o0.xyz, r0.xyzx, l(100.000000, 100.000000, 100.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used