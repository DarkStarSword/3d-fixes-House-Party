// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4678a60e3f9bba1c-ps.txt
// 3DMigoto: 4678a60e3f9bba1c |    Unity headers extracted from Alloy_Glass_HighQuality
//    Shader "Alloy/Glass/HighQuality" {
//      CustomEditor "AlloyFieldBasedEditor"
//      Fallback "VertexLit"
//      SubShader 1/1 {
//        LOD 500
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent" "RenderType"="Opaque" }
//        Pass 4/6 {
//          Name "FORWARD_DELTA"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Transparent" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Alloy_Glass_HighQuality:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201708220 254 4 8
//   undeciphered1a: 11
//   Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
//   undeciphered2: 1 5 7 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 1360
//   Vector 0 [_LightColor0]
//   Vector 160 [_Color]
//   Vector 176 [_MainTex_ST]
//   Vector 192 [_MainTexVelocity] 2
//   Float 204 [_MainTexUV]
//   Float 240 [_BaseColorVertexTint]
//   Float 244 [_Metal]
//   Float 248 [_Specularity]
//   Float 252 [_SpecularTint]
//   Float 256 [_Roughness]
//   Float 260 [_Occlusion]
//   Matrix 1296 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 16 [_LightPositionRange]
//   Vector 32 [_LightProjectionParams]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   Matrix 272 [unity_MatrixVP]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_MainTex] 2D 10
//   SetTexture 1 [_SpecTex] 2D 20
//   SetTexture 2 [unity_RandomRotation16] 2D 30
//   SetTexture 3 [unity_ProbeVolumeSH] 3D 00
//   SetTexture 4 [_ShadowMapTexture] CUBE 40
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityFog" 5
//   BindCB "UnityProbeVolume" 6
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.71 on Fri Feb 23 15:17:43 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float       
// TEXCOORD                 1   xyzw        1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float       
// TEXCOORD                 3   xyzw        4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   x   
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 0.123298101, -0.0392337516, 0.118705302, 0.795156479},
                              { -0.562537730, -0.360242814, 0.117367499, 0.608787775},
                              { 0.640371919, 0.0682112277, -0.0995851830, 0.724884212},
                              { 0.281338692, -0.588158786, 0.425981194, 0.615271807},
                              { -0.573121786, 0.270057201, 0.372357398, 0.889278710},
                              { 0.203316599, 0.419773906, -0.0228967592, 0.997290790},
                              { 0.846795797, -0.354558408, -0.0823479071, 0.504838586},
                              { -0.423045099, -0.797441, 0.182123497, 0.967378676},
                              { 0.719025314, 0.569357514, -0.213726401, 0.901174605},
                              { 0.0381546803, -0.991417110, 0.311506599, 0.420541495},
                              { -0.223626494, 0.502861381, 0.121632896, 0.383266},
                              { 0.172225401, 0.983663, 0.594893873, 0.759436071},
                              { -0.291246414, 0.898051202, 0.757646501, 0.533641696},
                              { -0.898414791, -0.0876278579, -0.521125, 0.759980321},
                              { -0.699508488, 0.673418522, -0.292312711, 0.654569924},
                              { -0.293196, -0.0628911927, 0.678247273, 0.223850},
                              { 0, 0, -0.307715207, 0.469762713},
                              { 0, 0, 0.448491305, 0.261945486},
                              { 0, 0, -0.530879915, 0.499821514},
                              { 0, 0, -0.737963378, 0.530493617},
                              { 0, 0, 0.0261313301, 0.176430196},
                              { 0, 0, -0.146107301, 0.304738402},
                              { 0, 0, -0.845102727, 0.324907303},
                              { 0, 0, -0.450770706, 0.210199699},
                              { 0, 0, -0.613728225, 0.328367412},
                              { 0, 0, -0.238586798, 0.0871624425},
                              { 0, 0, 0.338654786, 0.0152841099},
                              { 0, 0, -0.0423083305, -0.149465203},
                              { 0, 0, 0.167115, -0.109864801},
                              { 0, 0, -0.525606, 0.0157201905},
                              { 0, 0, -0.796685517, 0.131872699},
                              { 0, 0, 0.570428729, 0.477827311},
                              { 0, 0, -0.951663673, 0.00272503193},
                              { 0, 0, -0.706822276, -0.157232106},
                              { 0, 0, 0.217330605, -0.349408299},
                              { 0, 0, 0.0610042587, -0.449281603},
                              { 0, 0, 0.233398199, 0.224718899},
                              { 0, 0, 0.0727098733, -0.639673412},
                              { 0, 0, 0.467080802, -0.232466906},
                              { 0, 0, 0.372952789, -0.512625},
                              { 0, 0, 0.567507684, -0.405454397},
                              { 0, 0, -0.369198412, -0.128435},
                              { 0, 0, 0.875247300, 0.225698799},
                              { 0, 0, -0.268012702, -0.468439311},
                              { 0, 0, -0.117755100, -0.720575094},
                              { 0, 0, -0.127012104, -0.310542405},
                              { 0, 0, 0.559539378, -0.0630923733},
                              { 0, 0, -0.929913580, -0.187000796},
                              { 0, 0, 0.974674, 0.0367734805},
                              { 0, 0, 0.772673488, -0.0694472417},
                              { 0, 0, -0.499536097, -0.366374910},
                              { 0, 0, 0.647416770, -0.231578693},
                              { 0, 0, 0.191144899, -0.885892093},
                              { 0, 0, 0.367100090, -0.797053516},
                              { 0, 0, -0.697035313, -0.444943190},
                              { 0, 0, -0.417599, -0.718932629},
                              { 0, 0, -0.558474779, -0.602650404},
                              { 0, 0, -0.0262444802, -0.914142311},
                              { 0, 0, 0.565636, -0.658514917},
                              { 0, 0, -0.874976, -0.399787903},
                              { 0, 0, 0.917784274, -0.211052403},
                              { 0, 0, 0.815692723, -0.396955699},
                              { 0, 0, -0.283305407, -0.839544415},
                              { 0, 0, 0.799141, -0.588637173} }
dcl_constantbuffer cb0[84], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[23], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.x
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4678a60e3f9bba1c-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

dp3 r0.x, v8.xyzx, v8.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v8.xyzx
add r1.xyz, -v5.xyzx, r12.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
lt r0.w, cb0[12].w, l(0.500000)
movc r3.xy, r0.wwww, v7.xyxx, v7.zwzz
mad r3.zw, cb0[12].xxxy, cb1[0].yyyy, cb0[11].zzzw
div r3.zw, r3.zzzw, cb0[11].xxxy
add r3.xy, r3.zwzz, r3.xyxx
mul r3.xy, r3.xyxx, cb0[11].xyxx
dp3 r0.w, -r2.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r4.xyz, r0.xyzx, -r0.wwww, -r2.xyzx
dp3_sat r0.w, r0.xyzx, r2.xyzx
mad r1.w, r0.w, l(-5.554730), l(-6.983160)
mul r1.w, r0.w, r1.w
exp r1.w, r1.w
add r5.xyz, v4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r5.xyz, cb0[15].xxxx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r5.xyz, r5.xyzx, cb0[10].xyzx
sample r6.xyzw, r3.xyxx, t0.xyzw, s1
mul_sat r5.xyz, r5.xyzx, r6.xyzx
mul r2.w, r6.w, cb0[10].w
sample r3.xyzw, r3.xyxx, t1.xyzw, s2
mad r4.w, r3.y, l(0.305306017), l(0.682171106)
mad r4.w, r3.y, r4.w, l(0.0125228781)
mad r3.y, r3.y, r4.w, l(-1.000000)
mad r3.y, cb0[16].y, r3.y, l(1.000000)
mul r6.xy, r3.xzxx, cb0[15].yzyy
mul r3.z, r3.w, cb0[16].x
mul r3.w, r6.y, l(0.080000)
dp3 r4.w, r5.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
max r4.w, r4.w, l(0.000001)
div r6.yzw, r5.xxyz, r4.wwww
add r6.yzw, r6.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
mad r6.yzw, cb0[15].wwww, r6.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
mul r7.xyz, r3.wwww, r6.yzwy
mad r3.x, -cb0[15].y, r3.x, l(1.000000)
mul r8.xyz, r3.xxxx, r5.xyzx
mad r5.xyz, -r3.wwww, r6.yzwy, r5.xyzx
mad r5.xyz, r6.xxxx, r5.xyzx, r7.xyzx
mad r6.w, r3.x, r2.w, r6.x
mul r7.xyz, r6.wwww, r8.xyzx
mad r2.w, r3.z, l(0.950000), l(0.050000)
mul r2.w, r2.w, r2.w
add r0.w, r0.w, r3.y
mad r0.w, r0.w, r0.w, r3.y
add_sat r0.w, r0.w, l(-1.000000)
mov r8.x, cb4[9].z
mov r8.y, cb4[10].z
mov r8.z, cb4[11].z
dp3 r1.x, r1.xyzx, r8.xyzx
add r3.xyw, v5.xyxz, -cb3[25].xyxz
dp3 r1.y, r3.xywx, r3.xywx
sqrt r1.y, r1.y
add r1.y, -r1.x, r1.y
mad r1.x, cb3[25].w, r1.y, r1.x
mad_sat r1.x, r1.x, cb3[24].z, cb3[24].w
eq r1.y, cb6[0].x, l(1.000000)
if_nz r1.y
  eq r1.z, cb6[0].y, l(1.000000)
  mul r3.xyw, v5.yyyy, cb6[2].xyxz
  mad r3.xyw, cb6[1].xyxz, v5.xxxx, r3.xyxw
  mad r3.xyw, cb6[3].xyxz, v5.zzzz, r3.xyxw
  add r3.xyw, r3.xyxw, cb6[4].xyxz
  movc r3.xyw, r1.zzzz, r3.xyxw, v5.xyxz
  add r3.xyw, r3.xyxw, -cb6[6].xyxz
  mul r8.yzw, r3.xxyw, cb6[5].xxyz
  mad r1.z, r8.y, l(0.250000), l(0.750000)
  mad r3.x, cb6[0].z, l(0.500000), l(0.750000)
  max r8.x, r1.z, r3.x
  sample r8.xyzw, r8.xzwx, t3.xyzw, s0
else 
  mov r8.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
dp4_sat r1.z, r8.xyzw, cb2[46].xyzw
add r3.xyw, v5.xyxz, -cb2[1].xyxz
max r4.w, |r3.y|, |r3.x|
max r4.w, |r3.w|, r4.w
add r4.w, r4.w, -cb2[2].z
max r4.w, r4.w, l(0.000000)
mul r4.w, r4.w, cb2[2].w
div r4.w, cb2[2].y, r4.w
add r4.w, r4.w, -cb2[2].x
add r4.w, -r4.w, l(1.000000)
mul r8.xyz, v5.yyyy, cb4[18].xywx
mad r8.xyz, cb4[17].xywx, v5.xxxx, r8.xyzx
mad r8.xyz, cb4[19].xywx, v5.zzzz, r8.xyzx
add r8.xyz, r8.xyzx, cb4[20].xywx
mul r9.xz, r8.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r5.w, r8.y, cb1[5].x
mul r9.w, r5.w, l(0.500000)
add r8.xy, r9.zzzz, r9.xwxx
div r8.xy, r8.xyxx, r8.zzzz
sample r8.xyzw, r8.xyxx, t2.xyzw, s3
mul r9.xyz, r8.xyzx, l(45.543201, 12.989800, 78.233002, 0.000000)
mad r8.xyz, r8.zxyz, l(12.989800, 78.233002, 45.543201, 0.000000), -r9.xyzx
sincos r8.xyz, null, r8.xyzx
mul r8.xyz, r8.xyzx, l(43758.546875, 43758.546875, 43758.546875, 0.000000)
frc r8.xyz, r8.xyzx
mad r8.xyz, r8.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000), l(0.000100, 0.000100, 0.000100, 0.000000)
mul r9.xyz, r3.wxyw, r8.xyzx
mad r8.xyz, r3.ywxy, r8.yzxy, -r9.xyzx
dp3 r5.w, r8.xyzx, r8.xyzx
rsq r5.w, r5.w
mul r8.xyz, r5.wwww, r8.xyzx
mul r9.xyz, r3.wxyw, r8.yzxy
mad r9.xyz, r3.ywxy, r8.zxyz, -r9.xyzx
dp3 r5.w, r9.xyzx, r9.xyzx
rsq r5.w, r5.w
mul r9.xyz, r5.wwww, r9.xyzx
add r5.w, -cb3[24].x, l(1.000000)
mul r5.w, r5.w, l(0.100000)
mul r8.xyz, r5.wwww, r8.xyzx
mul r9.xyz, r5.wwww, r9.xyzx
mov r5.w, l(0)
mov r7.w, l(0)
loop 
  ige r8.w, r7.w, l(16)
  breakc_nz r8.w
  mul r10.xyz, r9.xyzx, icb[r7.w + 0].yyyy
  mad r10.xyz, r8.xyzx, icb[r7.w + 0].xxxx, r10.xyzx
  mad r10.xyz, r10.xyzx, l(1.250000, 1.250000, 1.250000, 0.000000), r3.xywx
  sample_c_lz r8.w, r10.xyzx, t4.xxxx, s4, r4.w
  add r5.w, r5.w, r8.w
  iadd r7.w, r7.w, l(1)
endloop 
eq r10.xy, r5.wwww, l(0.000000, 16.000000, 0.000000, 0.000000)
or r5.w, r10.y, r10.x
if_z r5.w
  mul r5.w, cb2[1].w, l(0.015000)
  mov r7.w, l(0)
  mov r8.w, l(0)
  loop 
    itof r9.w, r8.w
    ge r9.w, r9.w, l(64.000000)
    breakc_nz r9.w
    mul r10.yzw, r9.xxyz, icb[r8.w + 0].wwww
    mad r10.yzw, r8.xxyz, icb[r8.w + 0].zzzz, r10.yyzw
    add r10.yzw, r3.xxyw, r10.yyzw
    sample_c_lz r9.w, r10.yzwy, t4.xxxx, s4, r4.w
    div_sat r9.w, r9.w, r5.w
    add r7.w, r7.w, r9.w
    iadd r8.w, r8.w, l(1)
  endloop 
  mul r3.x, r7.w, l(0.015625)
else 
  movc r3.x, r10.x, l(0), l(1.000000)
endif 
add r1.x, r1.x, r3.x
min r1.x, r1.x, l(1.000000)
min r1.z, r1.x, r1.z
movc r1.x, r1.y, r1.z, r1.x
ge r1.y, cb0[0].w, l(1.000000)
if_nz r1.y
  mov r8.x, cb0[81].y
  mov r8.y, cb0[82].y
  mov r8.z, cb0[83].y
  dp3 r1.y, r8.xyzx, r8.xyzx
  rsq r1.y, r1.y
  mul r3.xyw, r1.yyyy, r8.xyxz
  frc r1.y, |cb0[0].w|
  mul r1.z, r1.y, v2.w
  add r1.y, -r1.y, |cb0[0].w|
  mul r1.y, r1.y, l(0.001000)
  mul r1.y, r1.y, v2.w
  mul r8.xyz, r1.yyyy, r3.xywx
  mad r9.xyz, r3.xywx, r1.yyyy, v2.xyzx
  mul r8.xyz, r8.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000)
  dp3 r4.w, r4.xyzx, r9.xyzx
  dp3 r5.w, r4.xyzx, r8.xyzx
  dp3 r7.w, r9.xyzx, r8.xyzx
  mad r4.w, r4.w, r5.w, -r7.w
  dp3 r7.w, r8.xyzx, r8.xyzx
  mad r5.w, -r5.w, r5.w, r7.w
  div_sat r4.w, r4.w, r5.w
  dp3 r5.w, v2.xyzx, r3.xywx
  max r5.w, -r1.y, r5.w
  min r5.w, r1.y, r5.w
  mad r3.xyw, -r5.wwww, r3.xyxw, v2.xyxz
  mad r8.xyz, r8.xyzx, r4.wwww, r9.xyzx
  dp3 r4.w, v2.xyzx, v2.xyzx
  rsq r9.y, r4.w
  mul r1.y, r1.y, l(0.250000)
  dp3 r4.w, r8.xyzx, r4.xyzx
  mad r10.xyz, r4.wwww, r4.xyzx, -r8.xyzx
  dp3 r4.w, r10.xyzx, r10.xyzx
  rsq r4.w, r4.w
  mul_sat r4.w, r1.z, r4.w
  mad r8.xyz, r10.xyzx, r4.wwww, r8.xyzx
  dp3 r4.w, r8.xyzx, r8.xyzx
  rsq r4.w, r4.w
  mul r1.z, r1.z, r4.w
  mad_sat r1.z, r1.z, l(0.500000), r2.w
  div r1.z, r2.w, r1.z
  mul r10.xyz, r4.wwww, r8.xyzx
  mul r1.z, r1.z, r1.z
  mad r8.xyz, r8.xyzx, r4.wwww, r2.xyzx
  dp3 r4.w, r8.xyzx, r8.xyzx
  rsq r4.w, r4.w
  mul r8.xyz, r4.wwww, r8.xyzx
  dp3_sat r9.x, r10.xyzx, r8.xyzx
  dp3_sat r8.x, r0.xyzx, r8.xyzx
  dp3 r4.w, r3.xywx, r3.xywx
  rsq r5.w, r4.w
  mul r3.xyw, r3.xyxw, r5.wwww
  dp3_sat r8.y, r0.xyzx, r3.xywx
  add r3.x, r4.w, l(1.000000)
  div r3.xyw, cb0[0].xyxz, r3.xxxx
  mad r1.y, r1.y, r5.w, l(1.000000)
  div r3.xyw, r3.xyxw, r1.yyyy
else 
  mul r1.y, v2.w, |cb0[0].w|
  dp3 r4.w, v2.xyzx, r4.xyzx
  mad r4.xyz, r4.wwww, r4.xyzx, -v2.xyzx
  dp3 r4.w, r4.xyzx, r4.xyzx
  rsq r4.w, r4.w
  mul_sat r4.w, r1.y, r4.w
  mad r4.xyz, r4.xyzx, r4.wwww, v2.xyzx
  dp3 r4.w, r4.xyzx, r4.xyzx
  rsq r4.w, r4.w
  mul r1.y, r1.y, r4.w
  mad_sat r1.y, r1.y, l(0.500000), r2.w
  div r1.y, r2.w, r1.y
  mul r10.xyz, r4.wwww, r4.xyzx
  mul r1.z, r1.y, r1.y
  mad r2.xyz, r4.xyzx, r4.wwww, r2.xyzx
  dp3 r1.y, r2.xyzx, r2.xyzx
  rsq r1.y, r1.y
  mul r2.xyz, r1.yyyy, r2.xyzx
  dp3_sat r9.x, r10.xyzx, r2.xyzx
  dp3_sat r8.x, r0.xyzx, r2.xyzx
  dp3 r1.y, v2.xyzx, v2.xyzx
  rsq r9.y, r1.y
  mul r2.xyz, r9.yyyy, v2.xyzx
  dp3_sat r8.y, r0.xyzx, r2.xyzx
  add r0.x, r1.y, l(1.000000)
  div r3.xyw, cb0[0].xyxz, r0.xxxx
endif 
mul r0.x, r9.y, v2.w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.x, r0.x, r0.x
mad r0.x, -r0.x, r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xywx
lt r1.y, l(0.000000), cb0[0].w
and r1.y, r1.z, r1.y
mul r1.z, r9.x, r9.x
mad r2.x, r8.y, l(-5.554730), l(-6.983160)
mul r2.x, r8.y, r2.x
exp r2.x, r2.x
dp2 r2.y, r3.zzzz, r1.zzzz
add r2.y, r2.y, l(-0.500000)
mad r2.x, r2.x, r2.y, l(1.000000)
mad r1.w, r1.w, r2.y, l(1.000000)
mul r1.w, r1.w, r2.x
mad r2.x, r9.x, l(-5.554730), l(-6.983160)
mul r2.x, r9.x, r2.x
exp r2.x, r2.x
add r3.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xxxx, r3.xyzx, r5.xyzx
mul r3.x, r2.w, r2.w
mul r3.y, r3.x, l(0.250000)
mad r3.x, -r3.x, l(0.250000), l(1.000000)
mad r1.z, r1.z, r3.x, r3.y
mul r3.x, r8.x, r8.x
mad r2.w, r2.w, r2.w, l(-1.000000)
mad r2.w, r3.x, r2.w, l(1.000000)
mul r2.w, r2.w, r2.w
mul r1.z, r1.z, r2.w
div r1.z, r3.y, r1.z
mul r0.w, r0.w, r1.z
mul r0.w, r1.y, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r0.w, r1.x, r8.y
mad r1.xyz, r7.xyzx, r1.wwww, r2.xyzx
mul r1.xyz, r0.wwww, r1.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx
div r0.w, v6.x, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mul r0.w, r0.w, cb5[1].x
mul r0.w, r0.w, -r0.w
exp r0.w, r0.w
mul r6.xyz, r0.xyzx, r0.wwww
min o0.xyzw, r6.xyzw, l(100.000000, 100.000000, 100.000000, 100.000000)
ret 
// Approximately 0 instruction slots used